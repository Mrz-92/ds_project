# -*- coding: utf-8 -*-
"""Final Data Science Project Group Id 9.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18FWhkxLNr7WD5ucauZJfa_6EbRUa30fa

# **Forecasting Global University Rankings: A Data-Driven Predictive Model for Evaluating Future Performance**


**Course Title & Code: Data Science (CS 8339)**

**Group Members:**

Engr. Priha Bhatti (FA23-PHCS-0001)
Erum Mumtaz (SP22-PHCS-0003)
Mirza Shaharyar Ali Baig (FA22-MSCS-0037)

**Description and Objectives of Project**

**Domain Name:** Education/Academics (University)-Global University Ranking: Our Project work is related to academics where we are going to predict the ranking of the World's top universities with respect to some attributes. By getting insights into business questions according to applying different models we get answers from data and create a complete outcome or report in the form of a dashboard.

**Business Questions**

a) What factors contribute most to a university's high ranking?

b) How do universities from different regions perform in the rankings?

c) Is there a correlation between specific indicators (teaching quality, research output, etc.) and the overall reputation score of a university?

d) Are there specific countries that dominate the top rankings?

e) Analyze countries and institutions based on their scores (e.g., academic scores, employer reputation, faculty/student ratios).

f) How do universities strategically improve their scores over time?

**About Dataset** The World University Rankings 2023 dataset include 1,799 universities across 104 countries and regions, making them the largest and most diverse university rankings to date. The table is based on 13 carefully calibrated performance indicators that measure an institution’s performance across four areas: teaching, research, knowledge transfer and international outlook. This year’s ranking analyzed over 121 million citations across more than 15.5 million research publications and included survey responses from 40,000 scholars globally. Overall, we collected over 680,000 datapoints from more than 2,500 institutions that submitted data.

**Features **This dataset includes the following 13 features: 1)University Rank 2)Name of University 3)Location 4)No of student 5)No of student per staff 6)International Student 7)Female :Male Ratio 8)OverAll Score 9)Teaching Score 10)Research Score 11)Citations Score 12)Industry Income Score 13)International Outlook Score
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.graph_objects as go
import plotly.express as px
import missingno as mno
import plotly.offline as pyo
import plotly.figure_factory as ff
import plotly.io as pio
color_pal = sns.color_palette()
plt.style.use('seaborn-dark-palette')
plt.style.use('dark_background')
import warnings
warnings.filterwarnings('ignore')
sns.set_theme(style='darkgrid', palette='colorblind')
from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()

#Model
from sklearn.model_selection import GridSearchCV, train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor
from sklearn.metrics import r2_score, mean_absolute_error, mean_squared_error
from sklearn.tree import DecisionTreeRegressor

data=pd.read_csv('/content/drive/MyDrive/World University Rankings 2023.csv')

data.head()

data.isna().sum()

data.info()

data.shape

data.describe().T

data.describe(include = 'object').T

# for duplicate rows
duplicate_rows = data[data.duplicated(keep='first')]
num_duplicates = duplicate_rows.shape[0]
print(f"Number of duplicate rows: {num_duplicates}")
duplicate_rows

# for checking the data types of the feature in dataset
data.dtypes

#  inorder to remove all the null values from the dataset
data=data.dropna()
data.shape

# change the datatype of the column
data['No of student'] = data['No of student'].str.replace(',', '').astype(int)

data.head()

data['International Student'] = data['International Student'].str.replace('%', ' ')
data['International Student'] = pd.to_numeric(data['International Student'], errors='coerce')
data['International Student']=  data['International Student']/100

data.columns = data.columns.str.strip()

# split the male and female ratio column
data[['Female', 'Male']] = data['Female:Male Ratio'].str.split(':', expand=True).astype(int)

# remove the original column from the dataset
data.drop(columns=['Female:Male Ratio'], inplace=True)

# inorder to print the unique value from the dataset
data['Location'].unique()

# group by on basis of location column
monthly_trends = data.groupby('Location')['No of student'].sum().reset_index()

# creation of lineplot
fig_monthly_trends = px.line(
    monthly_trends,  # DataFrame containing the data
    x='Location',   # x-values: job titles
    y='No of student',  # y-values: sum of salaries
    labels={'job_title': 'Job'},  # Customize label for the x-axis
    title='Number of Students Trends by Location',  # Set the title of the plot
    height=600 # Set the height of the plot
)

# show the plot
fig_monthly_trends.show()

top10_job_title = data['Location'].value_counts()[:10]
# creation of bar plot
fig = px.bar(
    y=top10_job_title.values,
    x=top10_job_title.index,
    color=top10_job_title.index,
    color_discrete_sequence=px.colors.sequential.PuBuGn,  # Set color palette
    text=top10_job_title.values,
    title='Top 10 Location ',
    template='plotly_dark'
)

# Update the layout of the plot
fig.update_layout(
    title_text='Distribution of location',
    height=600,
    xaxis_title="location",
    yaxis_title="Count",
    font=dict(size=10, family="Times new Roman")
)

# Display the plot
fig.show()

fig = px.bar(data, x="Location", y="No of student")

# Update the layout of the plot
fig.update_layout(
    title_text='Number of Studnet Distribution with location',  # Set the title of the plot
    height=500,  # Set the height of the plot
    xaxis_title="Location",  # Label for the x-axis
    yaxis_title="Number of Students",  # Label for the y-axis
    font=dict(size=12, family="Ariel")  # Set the font size and family for the text
)

# Display the plot
fig.show()

top5_salary = data['No of student'].sort_values(ascending=False).head(5)

# bar blot for the no of student
fig = px.bar(
    y=top5_salary.values,  # y-values: top 5 salaries
    x=top5_salary.index,   # x-values: indices of the top 5 salaries
    color=top5_salary.index,  # Color the bars based on the indices
    color_discrete_sequence=px.colors.sequential.PuBuGn,  # Set color palette
    text=top5_salary.values,  # Display the salary values on top of the bars
    title='Top 5 Number of students',  # Set the title of the plot
    template='plotly_dark'  # Use a dark template for the plot
)

# Update the layout of the plot
fig.update_layout(
    title_text='Number of students Distribution',
    height=600,
    xaxis_title="Number of students",  # Label for the x-axis
    yaxis_title="Count",  # Label for the y-axis
    font=dict(size=15, family="Franklin Gothic")  # Set the font size and family for the text
)

# Display the plot
fig.show()

fig = px.scatter(data, x="Location", y="No of student per staff")

# Update the layout of the plot
fig.update_layout(
    title_text='Number of student per staffs Distribution',
    height=500,
    xaxis_title="location",
    yaxis_title="Number of student per staffs",
    font=dict(size=12, family="Franklin Gothic")
)

# Display the plot
fig.show()

fig = px.box(data, x=data["Location"]=='United States', y="International Student", notched=True)

# Update the layout of the plot
fig.update_layout(
    title_text='International Student Box Distribution',  # Set the title of the plot
    height=500,  # Set the height of the plot
    xaxis_title="location in United States",  # Label for the x-axis
    yaxis_title="International Student",  # Label for the y-axis
    font=dict(size=15, family="Franklin Gothic")  # Set the font size and family for the text
)

# Display the plot
fig.show()

top_10_universities = data["Name of University"][:10]
top_10_scores =data["Citations Score"][:10]

# Create a bar chart for the top 10 universities
plt.figure(figsize=(8, 6))
plt.barh(top_10_universities[::-1], top_10_scores[::-1], color='lightblue')
plt.xlabel('Citation Score')
plt.title('Top 10 Universities Based on Scores')
plt.xlim(0, 100)  # Customize the score range as needed
plt.gca().invert_yaxis()  # Reverse the order to show the top university at the top
plt.show()

top_10_universities = data["Name of University"][:10]
top_10_scores =data["OverAll Score"][:10]

# Create a bar chart for the top 10 universities
plt.figure(figsize=(6, 4))
plt.barh(top_10_universities[::-1], top_10_scores[::-1], color='purple')
plt.xlabel('Overall Score')
plt.title('Top 10 Universities Based on Scores')
plt.xlim(0, 100)  # Customize the score range as needed
plt.gca().invert_yaxis()  # Reverse the order to show the top university at the top
plt.show()

top_10_universities = data["Name of University"][:10]
top_10_scores =data["Teaching Score"][:10]

# Create a bar chart for the top 10 universities
plt.figure(figsize=(6, 4))
plt.barh(top_10_universities[::-1], top_10_scores[::-1], color='lightgreen')
plt.xlabel('Teaching Score')
plt.title('Top 10 Universities Based on Scores')
plt.xlim(0, 100)  # Customize the score range as needed
plt.gca().invert_yaxis()  # Reverse the order to show the top university at the top
plt.show()

top_10_universities = data["Name of University"][:10]
top_10_scores =data["Research Score"][:10]

# Create a bar chart for the top 10 universities
plt.figure(figsize=(6, 4))
plt.barh(top_10_universities[::-1], top_10_scores[::-1], color='lightgreen')
plt.xlabel('Research Score')
plt.title('Top 10 Universities Based on Scores')
plt.xlim(0, 100)  # Customize the score range as needed
plt.gca().invert_yaxis()  # Reverse the order to show the top university at the top
plt.show()

top_10_universities = data["Name of University"][:10]
top_10_scores =data["Industry Income Score"][:10]

# Create a bar chart for the top 10 universities
plt.figure(figsize=(8, 4))
plt.barh(top_10_universities[::-1], top_10_scores[::-1], color='skyblue')
plt.xlabel('Industry Income Score')
plt.title('Top 10 Universities Based on Scores')
plt.xlim(0, 100)  # Customize the score range as needed
plt.gca().invert_yaxis()  # Reverse the order to show the top university at the top
plt.show()

top_10_universities = data["Name of University"][:10]
top_10_scores =data["International Outlook Score"][:10]

# Create a bar chart for the top 10 universities
plt.figure(figsize=(8, 4))
plt.barh(top_10_universities[::-1], top_10_scores[::-1], color='skyblue')
plt.xlabel('International Outlook Score')
plt.title('Top 10 Universities Based on Scores')
plt.xlim(0, 100)  # Customize the score range as needed
plt.gca().invert_yaxis()  # Reverse the order to show the top university at the top
plt.show()

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

# Sample data (replace with your university data)
top_10_universities = data["Name of University"][:10]
top_10_overall_scores = pd.to_numeric(data["OverAll Score"][:10], errors='coerce')
top_10_teaching_scores = pd.to_numeric(data["Teaching Score"][:10], errors='coerce')
top_10_research_scores = pd.to_numeric(data["Research Score"][:10], errors='coerce')
top_10_industry_income_scores = pd.to_numeric(data["Industry Income Score"][:10], errors='coerce')
top_10_international_outlook_scores = pd.to_numeric(data["International Outlook Score"][:10], errors='coerce')

# Define the number of categories (should be 5 in your case)
N = 11

angles = [n / float(N) * 2 * np.pi for n in range(N)]

# Ensure that all score arrays have the same length as angles
top_10_overall_scores = top_10_overall_scores.fillna(0).tolist()
top_10_teaching_scores = top_10_teaching_scores.fillna(0).tolist()
top_10_research_scores = top_10_research_scores.fillna(0).tolist()
top_10_industry_income_scores = top_10_industry_income_scores.fillna(0).tolist()
top_10_international_outlook_scores = top_10_international_outlook_scores.fillna(0).tolist()

fig, ax = plt.subplots(figsize=(3, 3), subplot_kw=dict(polar=True))
ax.fill(angles, top_10_overall_scores + [top_10_overall_scores[0]], 'b', alpha=0.1)
ax.fill(angles, top_10_teaching_scores + [top_10_teaching_scores[0]], 'g', alpha=0.1)
ax.fill(angles, top_10_research_scores + [top_10_research_scores[0]], 'r', alpha=0.1)
ax.fill(angles, top_10_industry_income_scores + [top_10_industry_income_scores[0]], 'y', alpha=0.1)
ax.fill(angles, top_10_international_outlook_scores + [top_10_international_outlook_scores[0]], 'p', alpha=0.1)

ax.set_yticklabels([])
ax.set_xticks(angles)
# ax.set_xticklabels(categories)
ax.set_title('Top 10 Universities Based on Scores')

# Add data labels
for i, label in enumerate(top_10_universities):
    ax.annotate(label, (angles[i], max(top_10_overall_scores[i], top_10_teaching_scores[i], top_10_research_scores[i], top_10_industry_income_scores[i], top_10_international_outlook_scores[i])), fontsize=6)

plt.show()

data['Location'] = le.fit_transform(data['Location'])

Corr_Matrix = data.corr()

# Set up the figure and plot the heatmap
plt.figure(figsize=(10, 10))
sns.heatmap(Corr_Matrix, annot=True, cmap='coolwarm', center=0)
plt.show()

print('Top 5 Most Positively Correlated to the To salary_in_usd')
Corr_Matrix['Female'].sort_values(ascending=False).head(5)

print('Top 5 Most Negatively Correlated to salary_in_usd ')
Corr_Matrix['Female'].sort_values(ascending=True).head(5)

data

# Function to calculate mid-value from a range string
def calculate_mid_value(range_str):
    # Replace non-standard hyphen with the standard hyphen
    range_str = range_str.replace('–', '-')

    # Split the range string into lower and upper bounds
    range_values = range_str.split('-')

    if len(range_values) == 2:
        lower, upper = map(float, range_values)
        # Calculate the mid-value
        mid_value = (lower + upper) / 2
        return mid_value
    else:
        # Return the original value for invalid formats
        return range_str

data.columns

# splitting the dataset
#X = data.drop(columns=['University Rank','Name of University','Female','OverAll Score','Teaching Score','Research Score','Citations Score','Industry Income Score','International Outlook Score'])
#y = data['Female']

#X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
# Display the shapes of the resulting datasets
#print("X_train shape:", X_train.shape)
#print("X_test shape:", X_test.shape)
#print("y_train shape:", y_train.shape)
#print("y_test shape:", y_test.shape)

#X_train=X_train.fillna(2)
#X_test=X_test.fillna(2)
#y_train=y_train.fillna(2)
#y_test=y_test.fillna(2)

#models = {
   # 'Random Forest': RandomForestRegressor(random_state=42),
    #'Gradient Boosting': GradientBoostingRegressor(random_state=42),
   # 'Decission tree': DecisionTreeRegressor(max_depth=3)
#}
#best_model = None
#best_r2 = 0

#for model_name, model in models.items():
 #   model.fit(X_train, y_train)
  #  y_pred= model.predict(X_test)

    # Evaluate the model
   # r2 = r2_score(y_test, y_pred)
    #mae = mean_absolute_error(y_test, y_pred)
    #rmse = np.sqrt(mean_squared_error(y_test, y_pred))
    #submit = pd.DataFrame()
    #submit['Actual_salary'] = y_test
    #submit['Predict_salary'] = y_pred
    #submit = submit.reset_index()
    #r2 = r2_score(y_test, y_pred)
    #if r2 > best_r2:
     #   best_r2 = r2
      #  best_model = model.__class__.__name__

    #print(f'{model_name}:')
    #print(f'R2 Score: {r2:.2f}')
    #print(f'Mean Absolute Error (MAE): {mae:.2f}')
    #print(f'Root Mean Squared Error (RMSE): {rmse:.2f}')
    #print(submit.head(5))

    #print('----------------------------------------')
#print(f"The best performing model is: {best_model} with accuracy: {best_r2:.2f}")#

data.dtypes

new_data=data
new_data

new_data['OverAll Score'] = new_data['OverAll Score'].apply(calculate_mid_value)
new_data

data['OverAll Score'] = data['OverAll Score'].astype(float)

new_data.columns

from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
X = new_data.drop(['University Rank', 'Name of University', 'Location', 'No of student','No of student per staff', 'International Student', 'OverAll Score'], axis=1)
y = new_data['OverAll Score']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = LinearRegression()

# Train the model on the training data
model.fit(X_train, y_train)

# Make predictions on the test data
y_pred = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f'Mean Squared Error (MSE): {mse}')
print(f'R-squared (R2): {r2}')